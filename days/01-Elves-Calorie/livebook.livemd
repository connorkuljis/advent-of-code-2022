# Untitled notebook

## Section

```elixir
defmodule AdventOfCode do
  def part_one(input) do
    input
    |> String.split("\n\n", trim: true)
    |> Enum.map(&sum_lines/1)
    |> Enum.max()
  end

  def sum_lines(sub_input) do
    sub_input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.to_integer/1)
    |> Enum.sum()
  end
end

AdventOfCode.part_one(File.read!("#{__DIR__}/items.txt"))
```

```elixir
File.read!("#{__DIR__}/items.txt")
|> String.split("\n\n")
|> Enum.map(fn e ->
  e
  |> String.split("\n")
  |> Enum.map(&String.to_integer/1)
  |> Enum.sum()
end)
|> Enum.max()
```

> The & operator, also known as the capture operator, takes the full function qualifier a module name, a function name, and an arity â€” and turns that function into a lambda that can be assigned to a variable

```elixir
File.read!("#{__DIR__}/items.txt")
|> String.split("\n\n") # 
|> Enum.map(
  |> String.split("\n")
  |> Enum.map(&String.to_integer/1)
  |> Enum.sum()
end
)
|> Enum.max()
```
